<apex:page showHeader="false" sidebar="false" standardStylesheets="false" docType="html-5.0" applyHtmlTag="false" applyBodyTag="false"
controller="GotvCcController">
<html>

<head>
  <meta charset="utf-8"></meta>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"></meta>
  <meta name="referrer" content="always"></meta>
  <apex:includeScript value="{!$Resource.agGridEnterprise17}" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Roboto+Condensed|Roboto+Mono" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Droid+Serif" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Open+Sans" />
  <apex:stylesheet value="https://fonts.googleapis.com/css?family=Source+Sans+Pro" />
  <apex:stylesheet value="{!URLFOR($Resource.FontAwesomeZip, 'font-awesome.css')}" />
  <style>
    @font-face {
      font-family: 'FontAwesome';
      src: url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.eot')}");
      src: url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.eot')}") format('embedded-opentype'),
      url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.woff')}") format('woff'),
      url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.ttf')}") format('truetype'),
      url("{!URLFOR($Resource.FontAwesomeZip, 'fontawesome-webfont.svg')}") format('svg');
      font-weight: normal;
      font-style: normal;
    }

    .options-span {
      font-size: 18px;
    }

    #filters-div, #views-div {
      display: inline-block;
      font-size: 18px;
      width: 20px;
    }

    .not-allowed {
      cursor: not-allowed !important;
    }
    .allowed {
      cursor: inherit;
    }

    @media screen and (max-width: 1920px) { 
      #AccountGridDiv {
        height: 765px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1366px) { 
      #AccountGridDiv {
        height: 550px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1280px) { 
      #AccountGridDiv {
        height: 550px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    .ag-cell-range-selected {
      background-color: #b0e0e6 !important;
    }

    .BasicHdr {
      margin-left: 2px;
    }

    .BasicHdrR {
      text-align: right;
      color: rebeccapurple;
    }

    .NoEdit {
      font-family: 'Montserrat', sans-serif;
      background-color: rgba(205, 92, 92, 0.2);
    }

    .NoEditCenter {
      display: flex;
      justify-content: center;
      background-color: rgba(205, 92, 92, 0.2);
    }

    .NoEditHdr {
      color: rgb(205, 92, 92);
      margin-left: 2px;
    }

    .NoEditHdrCenter {
      display: flex;
      justify-content: center;
      color: rgb(205, 92, 92);
    }

    .XHeaderLeft, .XCellLeft {
      background-color: rgba(178, 92, 205, 0.15);
    }

    .XCellCenter {
      display: flex;
      justify-content: center;
      background-color: rgba(178, 92, 205, 0.15);
    }

    .XHdrCenter {
      display: flex;
      justify-content: center;
      background-color: rgba(178, 92, 205, 0.15);
    }

    #VoteBlockSelectList,
    #UniverseSelectList,
    #ViewSelectList {
      width: 130px;
      margin-left: 2px;
      margin-right: 4px;
      background-color: aliceblue;
    }

    #TypeTotalsContainerDiv,
    #SumTotalsContainerDiv,
    #VoteBlockContainerDiv,
    #OwnerThreeTouchContainerDiv1,
    #OwnerThreeTouchContainerDiv2 {
      display: flex;
      width: 90%;
      padding-left: 9px;
      padding-top: 4px;
      padding-bottom: 9px;
      padding-right: 9px;
    }

    #OwnerVoteBlockContainerDiv {
      display: flex;
      flex-wrap: wrap;
      width: 90%;
      padding-left: 9px;
      padding-top: 4px;
      padding-bottom: 9px;
      padding-right: 9px;
    }

    #Tab2Content,
    #Tab3Content,
    #Tab4Content,
    #Tab5Content {
      min-height: 850px;
      margin-right: 10px;
      margin-bottom: 5px;
    }

    #CountsDiv1,
    #CountsDiv1a {
      display: inline-block;
      margin-left: 10px;
      margin-right: 10px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    #CountsDiv2 {
      display: inline-block;
      width: 48%;
      margin-left: 10px;
      margin-right: 10px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    #CountsDiv3 {
      display: block;
      width: 97%;
      margin-left: 10px;
      margin-right: 10px;
      margin-top: 5px;
      margin-bottom: 5px;
    }

    .CountsTitle {
      font-size: 16px;
      width: 50%;
      margin-left: 10px;
      margin-top: 5px;
    }

    .SaveButton {
      float: right;
      margin-left: 4px;
      margin-right: 10px;
      margin-top: 2px;
      margin-bottom: 5px;
      border-radius: 15px;
      background-color: orange;
      display: none;
    }

    .UniverseButton,.ViewsButton {
      float: right;
      margin-left: 0px;
      margin-right: 52px;
      margin-top: 8px;
      margin-bottom: 5px;
      border-radius: 15px;
    }

    .Btn {
      float: right;
      margin-left: 0px;
      margin-right: 5px;
      margin-bottom: 5px;
      border-radius: 15px;
      cursor:pointer;
    }

    #Version {
      display: inline-block;
      width: 119px;
      height: 23px;
      padding-top: 6px;
      font-size: 10px;
      padding-left: 10px;
    }

    #ScreenSize {
      display: inline-block;
      height: 23px;
      padding-top: 6px;
      font-size: 10px;
      text-align: right;
      padding-right: 40px;      
    }

    .cellRight {
      text-align: right;
      padding-right: 5px !important;
    }

    .cellCenter {
      text-align: center !important;
    }

    .cellLeft {
      text-align: left;
      padding-left: 5px !important;
    }

    .BaseGrid {
      font-family: 'Open Sans', serif !important;
    }

    .filterCol {
      background-color: rgba(206, 228, 233, 0.4);
    }

    .HeaderLeft {  
      color: blue;
      margin-left: 2px;
      padding-right: 7px !important;
    }

    .HeaderRight {  
      display: flex;  
      justify-content: right;
      color: blue;
      margin-left: 2px;
      padding-right: 7px !important;
    }

    .HeaderCenter {  
      color: blue;
      margin-left: 2px;
      padding-left: 18px !important;
      padding-right: 5px !important;
    }

    .chkBox {
      background: #4d84c7;
      border-radius: 30px;
    }

    .tabs {
      position: relative;
    }

    .tabs__navigation {
      margin-top: 8px;
      margin-bottom: 4px;
      clear: both;
      display: grid;
      grid-template-columns: 42% 17% 41%;
    }

    .tabs__link {
      display: inline-block;
      text-decoration: none;
      padding: .25rem .75rem;
      color: #4ca9ce;
      background: #E7E7E7;
      margin-left: .25rem;
    }

    .inactive {
      color: #B3B3B3;
    }

    .tabs__link:first-child {
      margin-left: 10px;
    }

    .tabs__link--active {
      font-weight: bold;
      border-bottom-color: #fff;
      background: #fff;
      color: #186baa;
    }

    .NoDisplay {
      display: none;
    }

    .YesDisplay {
      display: initial;
    }

    .hide {
      visibility: hidden;
    }

    .show {
      visibility: visible;        
    }

    #EditInsidePlanNotesDiv , #EditConsolidatedNotesDiv {
      position: fixed;
    }

    .NoData {
      position: fixed;
      top: 200px;
      left: 270px;
      width: 200px;
      height: 50px;
      background-color: white;
      color: blue;
      font-weight: bold;
      font-weight: bold;
      font-style: italic;
    }

    .modalDialog {
      position: fixed;
      font-family: Arial, Helvetica, sans-serif;
      top: 200px;
      left: 270px;
      width: 80%;
      height: 70%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 99999;
      opacity: 0.8;
      pointer-events: none;
    }

    .modalDialog>div {
      width: 400px;
      position: relative;
      margin: 10% auto;
      padding: 5px 20px 13px 20px;
      border-radius: 10px;
      background: #fff;
      background: -moz-linear-gradient(#fff, #999);
      background: -webkit-linear-gradient(#fff, #999);
      background: -o-linear-gradient(#fff, #999);
    }

    .CreateXmatch {
      position: fixed;
      top: 200px;
      left: 20%;
      min-width: 31%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      z-index: 99999;
      background-color: rgb(160, 145, 116);
      color: white;
      padding-top: 15px;
      padding-bottom: 15px;
      text-align: center;
    }

    body {
      color: white;
      background-color: rebeccapurple;
      margin: 0px !important;
      font-family: 'Source Sans Pro', sans-serif;
      border: none !important;
      font-size: 14px;
    }

    #MatchBtn,XmatchBtn,#XmatchedBtn {
      margin-left: 5px;
      margin-top: 5px;
    }

    .chks {
      margin-left: 6px;
      margin-top: 8px;
    }

    .chksLbl {
      font-size: 80%;
      color:red;
      margin-right: 10px;
    }

    /* removes outline dots from button when it gets focus */
    :focus {
      outline: none;
    }

    ::-moz-focus-inner {
      border: 0;
    }

    #FilterDiv1Container {
      display: grid;
      grid-template-columns: 70% 30%; 
      margin-top: 6px;
    } 
    
    #FilterDiv1Container2 {
      display: inline-block;
    } 

    #FilterDiv1,
    #FilterDiv2 {
      display: inline-block;
      color: #bbc6a5;
      font-size: 16px;
      padding-bottom: 4px;
      background-color: white;
      padding-right: 18px;
      margin-left: 10px;
      padding-top: 4px;
    }

    #CurrentFilterDiv {
      color: #bbc6a5;
    }

/*
    #FilterDiv {
      display: inline-block;
      width: 120px;
    }
*/
    #CurrentFilter {
      color: #1492AC;
      margin-left: 9px;
      margin-top: 5px;
      background-color: white;
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      font-size: 12px;
      padding-left: 3px;
      padding-top: 3px;
      width: 97%;
      height: 37px;
    }

    #AccountFilterInput {
      padding-left: 5px;
      width: 97%;
      height: 24px;
      font-size: 14px;
      margin-top: 6px;
      margin-left: 8px;
    }

    @media screen and (max-width: 1920px) { 
      #ContactFilterInput {
        padding-left: 5px;
        width: 714px;
        height: 24px;
        font-size: 14px;
        margin-top: 6px;
        margin-left: 8px;
      }

      #ContactGridDiv,
      #MatchContactGridDiv,
      #LicensureGridDiv {
        height: 750px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1366px) { 
      #ContactFilterInput {
        padding-left: 5px;
        width:235px;
        height: 24px;
        font-size: 14px;
        margin-top: 6px;
        margin-left: 8px;
      }
      #ContactGridDiv,
      #MatchContactGridDiv,
      #LicensureGridDiv {
        height: 450px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    @media screen and (max-width: 1280px) { 
      #ContactFilterInput {
        padding-left: 5px;
        width:235px;
        height: 24px;
        font-size: 14px;
        margin-top: 6px;
        margin-left: 8px;
      }
      #ContactGridDiv,
      #MatchContactGridDiv,
      #LicensureGridDiv {
        height: 450px;
        padding-left: 9px;
        padding-top: 4px;
        padding-bottom: 9px;
        padding-right: 9px;
      }
    }

    /*
    * Tooltip Styles - https://chrisbracco.com/a-simple-css-tooltip/
    */

    /* Add this attribute to the element that needs a tooltip */
    [data-tooltip] {
      position: relative;
      z-index: 2;
      cursor: pointer;
    }

    /* Hide the tooltip content by default */
    [data-tooltip]:before,
    [data-tooltip]:after {
      visibility: hidden;
      opacity: 0;
      pointer-events: none;
    }

    /* Position tooltip above the element */
    [data-tooltip]:before {
      position: absolute;
      bottom: 150%;
      left: 50%;
      margin-bottom: 5px;
      margin-left: -80px;
      padding: 7px;
      width: 160px;
      -webkit-border-radius: 3px;
      border-radius: 3px;
      background-color: #000;
      background-color: hsla(0, 0%, 20%, 0.9);
      color: #fff;
      content: attr(data-tooltip);
      text-align: center;
      font-size: 14px;
      line-height: 1.2;
    }

    /* Triangle hack to make tooltip look like a speech bubble */
    [data-tooltip]:after {
      position: absolute;
      bottom: 150%;
      left: 50%;
      margin-left: -5px;
      width: 0;
      border-top: 5px solid #000;
      border-top: 5px solid hsla(0, 0%, 20%, 0.9);
      border-right: 5px solid transparent;
      border-left: 5px solid transparent;
      content: " ";
      font-size: 0;
      line-height: 0;
    }

    /* Show tooltip content on hover */
    [data-tooltip]:hover:before,
    [data-tooltip]:hover:after {
      visibility: visible;
      opacity: 1;
    }

    /* Add this attribute to the element that needs a tooltip */
    [data-tooltip2] {
      position: relative;
      z-index: 2;
      cursor: pointer;
    }

    /* Position tooltip above the element */
    [data-tooltip2]:before {
      position: absolute;
      bottom: 97%;
      left: 50%;
      margin-bottom: 5px;
      margin-left: -80px;
      padding: 7px;
      width: 160px;
      -webkit-border-radius: 3px;
      border-radius: 3px;
      background-color: hsla(0, 78.8%, 53.7%, 0.9);
      background-color: hsla(0, 78.8%, 53.7%, 0.9);
      color: #fff;
      content: attr(data-tooltip2);
      text-align: center;
      font-size: 14px;
      line-height: 1.2;
    }

    /* Triangle hack to make tooltip look like a speech bubble */
    [data-tooltip2]:after {
      position: absolute;
      bottom: 97%;
      left: 50%;
      margin-left: -5px;
      width: 0;
      border-top: 5px solid hsla(0, 78.8%, 53.7%, 0.9);
      border-top: 5px solid hsla(0, 78.8%, 53.7%, 0.9);
      border-right: 5px solid transparent;
      border-left: 5px solid transparent;
      content: " ";
      font-size: 0;
      line-height: 0;
    }

    #XmatchTypeLbl {
      text-align: center;
    }

    #TitleDiv {
      margin-top: 2px;
      display: grid;
      grid-template-columns:30% 40% 30%; 
    }

    #TitleHdr {
      font-size: 25px;
    }

    #TitleBtn {
      border-radius: 21px;
      border-style: none;
      color: blue;
      font-size: 25px;
      width:567px;
    }

    #TitleBtn:hover {
      color: white;
      background-color: blue;      
      cursor: pointer;
    }

    .NavSection {
      display: inline-block;
      padding: 2px;
    }

    #SelectAccountLbl {
      margin-left: 10px;
      padding-right: 4px;
      font-size: 18px;
    }

    #XmatchButtonsDiv {
      padding-top: 10px;
    }

    #XMatchedDiv1,#XMatchedDiv2 {
      padding: 5px;
    }

    #XBatchMessage {
      color: blue;
      margin-left: 115px;
    }

    .RadioDisabled {
      text-decoration-line: line-through;
      text-decoration-color: red;
    }

    #CurrentRecordLbl, #ProgressLbl {
      margin-left: 5px;
      font-size: 12px;
      border: 1px solid white;
    }

    .LicCountLabel {
      color:blue;
      padding-left: 10px;
    }

    #LicCountsDiv {
      padding: 10px;
      border: 1px solid white;
      margin-top: 10px; 
      display: grid;
      grid-template-columns: auto auto auto auto auto;
    }

  </style>
</head>

<body>

  <div id="Content">
    <div id="TitleDiv">
      <div id="Version">v0.1</div>
      <input id="TitleBtn" type="Button" value="Cross Match">
      </input>
      <label id="ScreenSize"></label>      
    </div>

    <div class="tabs">
      <div id="NavigationDiv">
        <nav class="tabs__navigation">
          <div class="NavSection">
            <a id="Tab1Id" class="tabs__link tabs__link--active" href="#tab1">Employers</a>
            <a id="Tab2Id" class="tabs__link" href="#tab2">Contacts</a>
            <a id="Tab3Id" class="tabs__link" href="#tab3">Licensure =></a>
            <a id="Tab4Id" class="tabs__link" href="#tab4">Matches</a>            
          </div>
        </nav>
      </div>

      <label id="SelectAccountLbl">Selected Account</label>

      <div id="tab1" class="tabs__section">
        <div id="FilterDiv1Container">
          <div id="FilterDiv1">
            <input id="AccountFilterInput" placeholder="Search..." type="text" />
          </div>
        </div>

        <div id="AccountGridDiv" class="ag-fresh"></div>
      </div>

      <div id="tab2" class="tabs__section">
        <div id="Tab2Content">
          <div id="Tab2ControlsDiv">
            <div id="FilterDiv1Container2">
              <div id="FilterDiv2">
                <input id="ContactFilterInput1" placeholder="Search..." type="text" />
              </div>
            </div>
          </div>
          <div id="ContactGridDiv" class="BaseGrid ag-fresh"></div>
          <div id="CurrentFilterDiv2">
            <textarea id="CurrentFilter" placeholder="Current filter" cols="175" rows="3" readonly="true"></textarea>
          </div>
        </div>

      </div>

      <div id="tab3" class="tabs__section">
        <div id="Tab3Content">
          <label>Match against: CertifiedHemotech</label>
          <input id="RetrieveBtn" type="Button" value="Retrieve"></input>
          <input id="MatchBtn"    type="Button" value="Match"></input>
          <label id="CurrentRecordLbl">Current Record:</label>
          <label id="ProgressLbl">Targets checked:</label>

          <div id='LicCountsDiv'></div>
        </div>
      </div>

      <div id="tab4" class="tabs__section">
        <div id="Tab4Content">
          <div id="LicensureGridDiv" class="BaseGrid ag-fresh"></div>          
        </div>
      </div>

  </div>

  <div id="ModalLoadingDiv" class="modalDialog hide">
    <div>
      <h2>Loading data...</h2>
    </div>
  </div>

</div>

  <script type="text/javascript">
    'use strict';

    function accountFilterInputHandler(e) {
      let searchText = e.target.value;
      accountGridOptions.api.setQuickFilter(searchText);
    }

    function contactFilterInputHandler(e) {
      let searchText = e.target.value;
      contactGridOptions.api.setQuickFilter(searchText);
      recount('contactFilterInputHandler');
    }

    function tab1ClickHandler() {
      let filters;
      selectedTab = 1;
      if (contactGridOptions) {
        filters = contactGridOptions.api.getFilterModel();
        if (filters) {
          contactGridOptions.api.setFilterModel(null);
        }
      }
    }

    function tab2ClickHandler() {
      selectedTab = 2;
    }

    function tab3ClickHandler() {
      selectedTab = 3;
    }

    function showLicensureGrid() {

      if (licensureGridOptions)
        licensureGridOptions.api.destroy();

      licensureGridOptions = {
        columnDefs: licensureColDefs,
        defaultColDef:licensureDefaultColDefs,
        rowData: licensureDataArray,
        rowSelection: 'single',
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true
      };
      new agGrid.Grid(licensureGridDiv, licensureGridOptions);
      licensureGridOptions.api.setSortModel(xmatchSort);

    }

    function getRadioValue(radioName) {
      let radios = document.getElementsByName(radioName);
      let selectedValue = '';
      for (var i = 0; i < radios.length; i++) {
        if (radios[i].checked) {
          selectedValue = radios[i].value;
          break;
        }
      }
      return selectedValue;
    }

    function init() {
      accountFilterInput.addEventListener("input", accountFilterInputHandler, false);
      matchButton.addEventListener("click",   matchButtonHandler, false);
      retrieveButton.addEventListener("click",retrieveButtonHandler, false);
      tab1Id.addEventListener("click", tab1ClickHandler, false);
      tab2Id.addEventListener("click", tab2ClickHandler, false);      
      tab3Id.addEventListener("click", tab3ClickHandler, false);      

      pureTabs.init('tabs__link', 'tabs__link--active'); // http://www.cssscript.com/lightweight-tabs-widget-with-pure-javascript-puretabs
      shownBefore = false;
      accountMap = {};
      contactMap = {};
      screensize.innerHTML = `screen: ${screen.width} x ${screen.height}`;
      sessionId      = '{!$Api.Session_ID}';
      userId         = '{!$User.Id}';
      userFirstName  = '{!$User.FirstName}';
      userLastName   = '{!$User.LastName}';
      userDepartment = '{!$User.Department}';
      userTitle      = '{!$User.Title}';
      userProfileId  = '{!$User.ProfileId}';
      userRoleId     = '{!$User.UserRoleId}';
      baseURL        = '{!$CurrentPage.URL}';
      userFirstName  = toProperCase(userFirstName);
      userLastName   = toProperCase(userLastName);   
      userDepartment = toProperCase(userDepartment); 
      userTitle      = toProperCase(userTitle);      

      if (userDepartment.toLowerCase() == 'ops/fin-data') {
        userLevel = 'Admin';
      } else {
        let dirTest = userTitle.match(/Director/g);
        if (dirTest != null || userTitle.substr(0, 5) == 'Coord' || userId == '005i0000008MCokAAG') {
          userLevel = 'Super';
        } else {
          userLevel = 'Regular';
        }
      }

      console.log(userFirstName, userTitle, userDepartment,userId, userProfileId, userRoleId);
      initAgGridContact();

    }

    function clean(s) {
      let s1, s2, s3, s4, s5, s6, s7, s8, s9 = '';

      if (s == null || s == undefined)
        s9 = '';
      else {
        s1 = s.replace(r1, "&");
        s2 = s1.replace(r2, "'");
        s3 = s2.replace(r3, "&");
        s4 = s3.replace(r4, "'");
        s5 = s4.replace(r5, "'");
        s6 = s5.replace(r6, ">");
        s7 = s6.replace(r7, ">");
        s8 = s7.replace(r8, "<");
        s9 = s8.replace(r9, "<");
      }
      return s9;
    }

    function toProperCase(s) {
      // My version - handles hyphenated names correctly :)
      let s1, s2;
      if (s == null || s == undefined)
        s2 = '';
      else {
        s1 = s.trim().toLowerCase();
        s2 = clean(s1);
        s2 = s2.replace(/\b[a-zA-Z]/g, function ($1) { return $1.toUpperCase(); });
      }
      return s2;
    }

    function getAccountData() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getAccountData((result, event) => {
          if (event.status) {
            console.log('Retrieved Account data');
            resolve(result);
          }
          else {
            console.log('Error retrieving Account data');
            reject(event);
          }
        }, {buffer: false, timeout: 120000 });
      });
    }

    function processAccountData(results) {
      return new Promise(function (resolve, reject) {
        let len, rec, i, j, allowed, emptyArrayItem;
        let id, region, accountName, buCount, division, hospitalSystem, coordId, coordLastname, coordFirstName, org1Id, org1Lastname, org1FirstName
        let coordLn, coordFn, coord, org1Ln, org1Fn, org1;
        let universeId, universeAccountId, universeName, universeType, universeDesc, universeSoql, _universeFilters, universeFilters, srAllowed, srAllowedResponses, srDescription, srName;

        accountDataArray = [];
        accountMap = {};
        len = results.length;
        if (len > 0) {
          for (i = 0; i < len; i++) {
            id = accountName = division = hospitalSystem = buCount = coordId = coord = coordLn = coordFn = org1Id = org1 = org1Ln = org1Fn = '';
            rec = results[i];
            id = rec.Id;
            accountName = toProperCase(rec.Name);
            region = toProperCase(rec.Region__c);
            division = toProperCase(rec.Account_Group__c);
            buCount = parseInt(rec.BU_Count__c) || 0;

            if ('Coordinator__r' in rec) {
              if (rec.Coordinator__r) {
                coordLn = toProperCase(rec.Coordinator__r.LastName);
                coordFn = toProperCase(rec.Coordinator__r.FirstName);
                coord = `${coordLn}, ${coordFn}`;
              }
            }

            if ('Organizer_1__r' in rec) {
              if (rec.Organizer_1__r) {
                org1Ln = toProperCase(rec.Organizer_1__r.LastName);
                org1Fn = toProperCase(rec.Organizer_1__r.FirstName);
                org1 = `${coordLn}, ${coordFn}`;
              }
            }

            accountMap[id] = {
              Id: id, AccountName: accountName, BuCount: buCount, Division: division, Region: region, HospitalSystem: hospitalSystem,
              Coord: coord, Org1Id: org1Id, Org1: org1
            };

            accountDataArray.push({
              Id: id, AccountName: accountName, BuCount: buCount, Division: division, Region: region, HospitalSystem: hospitalSystem,
              Coord: coord, Org1Id: org1Id, Org1: org1
            });

          }
          showAccountGrid();
          showLoadingMsg(false);
        }

        resolve('ok');
      });
    }

    function makeCheckBox(countRec) {
      let lType,lCnt,newDiv,newCheckBox,checkBoxLabel,countLabel;

      newDiv            = document.createElement('div');
      checkBoxLabel     = document.createElement("Label");
      countLabel        = document.createElement('Label');
      newCheckBox       = document.createElement('input');
      newCheckBox.type  = 'checkbox';
      newCheckBox.id    = countRec.Ltype;
      newCheckBox.value = countRec.Ltype;

      lType = toProperCase(countRec.Ltype);
      lCnt  = numberFormat(countRec.Lcnt);
//console.log('makecheckbox');
      console.log(lType,lCnt);

      checkBoxLabel.setAttribute("for", lType);
      checkBoxLabel.innerHTML = lType;
      checkBoxLabel.setAttribute('class', 'DescCheckBoxLabel');

      countLabel.innerHTML = lCnt;
      countLabel.setAttribute('class', 'LicCountLabel');

      newDiv.appendChild(newCheckBox);
      newDiv.appendChild(checkBoxLabel);
      newDiv.appendChild(countLabel);
      newDiv.setAttribute('class', 'DescCheckboxDiv');

      return newDiv;
    }

    function processLicensureCounts(results) {
      return new Promise(function (resolve, reject) {
        let len, i, rec,lType,lCnt,newCB;
        len = results.length;
        licListCountsArray = [];
        console.log('-- processLicensureCounts --');
        for (i = 0; i < len; i++) {
          rec = results[i];
//          lType = toProperCase(rec.Ltype);
//          lCnt  = numberFormat(rec.Lcnt);
//          licListCountsArray.push({Type:lType, Count:lCnt})
          newCB = makeCheckBox(rec);
          licCountsDiv.appendChild(newCB);
        }
//        console.log('-- licListCountsArray --');
//        console.log(licListCountsArray);
        resolve('ok');
      });
    }

    function getLicensureCounts() {
    return new Promise(function (resolve, reject) {
        GotvCcController.getLicensureCounts((result, event) => {
          if (event.status) {
            console.log('Retrieved Licensure counts....');
            resolve(result);
          }
          else {
            console.log('Error retrieving Licensure counts');
            reject(event);
          }
        }, {buffer: false, timeout: 120000 });
      });
    }

    function getLicensureData() {
      return new Promise(function (resolve, reject) {
        GotvCcController.getLicensureData((result, event) => {
          if (event.status) {
            console.log('Retrieved Licensure data');
            resolve(result);
          }
          else {
            console.log('Error retrieving Licensure data');
            reject(event);
          }
        }, {buffer: false, timeout: 120000 });
      });
    }

    function contextMenuItems(params) {
      params.node.setSelected(true, true);
      let result = [
        { 
          name: 'Edit Inside Plan Notes',
          action: function () {
            editInsidePlanNotes(params.node.data.GotvInsidePlanNotes);
          }
        },
        { 
          name: 'Edit Outside Plan Notes',
          action: function () {
            editOutsidePlanNotes(params.node.data.GotvOutsidePlanNotes);
          }
        },
        { 
          name: 'Edit Special Plan Notes',
          action: function () {
            editSpecialPlanNotes(params.node.data.GotvSpecialPlanNotes);
          }
        },        
        { 
          name: 'Edit TaskActivity Notes',
          action: function () {
            editTaskActivityNotes(); // // Note: These are stored in a map, so not passing in a param
          }
        },
        { 
          name: 'View Consolidated Notes',
          action: function () {
            editConsolidatedNote(params.node.data.NotesConsolidated);
          }
        }          
      ];
      return result;
    }

    function showContactGrid() {
      if (contactGridOptions)
        contactGridOptions.api.destroy();

      contactGridOptions = {
        rowHeight: 20,
        columnDefs: contactColDefs,
        defaultColDef: contactDefaultColDefs,
        rowData: contactDataArray,
        rowSelection: 'multiple',
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true,
        onSelectionChanged: contactSelectionHandler,
        enableRangeSelection: true,
        getContextMenuItems: contextMenuItems,
        getRowNodeId: function (data) { return data.Id; }
      };
      new agGrid.Grid(contactGridDiv, contactGridOptions);
      contactGridOptions.api.setSortModel(nameSort);

      tab2Id.click();
      showLoadingMsg(false);
    }

    function checkboxChangeHandler(event) {
      let refreshParams = { force: true };
      let fieldArray = event.target.id.split(' ');
      selectedContactId = fieldArray[0];
      changedField = fieldArray[1];
      changeTo = event.target.checked;
      selectedContactName = contactMap[selectedAccountId][selectedContactId].Name;
 //     updateSalesforce();
    }

/*     function updateSalesforce() {
      return new Promise(function (resolve, reject) {
        GotvCcController.updateContact(selectedContactId, changedField, changeTo, (result, event) => {
          if (event.status) {
            notify.log('Salesforce updated');
            resolve(result);
          }
          else {
            let eType = event.type;
            let eMsg = event.message;
            let eWhere = event.where;
            alert('Salesforce update error: ' + eMsg);
            console.log(eType);
            console.log(eMsg);
            if (eWhere != undefined) console.log(eWhere);
            reject(event);
          }
        })
      });
    } */

    function showAccountGrid() {
      if (accountGridOptions)
        accountGridOptions.api.destroy();

      accountGridOptions = {
        columnDefs: accountColDefs,
        rowData: accountDataArray,
        rowSelection: 'single',
        onSelectionChanged: accountSelectionHandler,
        onRowDoubleClicked: rowDoubleClickedHandler,
        enableSorting: true,
        enableFilter: true,
        showToolPanel: false,
        toolPanelSuppressRowGroups: true,
        toolPanelSuppressValues: true,
        toolPanelSuppressPivots: true,
        toolPanelSuppressPivotMode: true
      };
      new agGrid.Grid(accountGridDiv, accountGridOptions);
    }

    function addOption(dropDown, name, id) {
      let opt = document.createElement("option");
      opt.text = name;
      opt.value = id;
      dropDown.add(opt, null);
    }

    function rowDoubleClickedHandler() {
      let selectedNode    = accountGridOptions.api.getSelectedNodes()[0];
      selectedAccount     = selectedNode.data.AccountName;
      selectedAccountId   = selectedNode.data.Id;
      selectAccountLabel.textContent = selectedAccount;
      
      tab2Content.className        = 'show';
      tab3Content.className        = 'show';
      tab4Content.className        = 'show';      
     
      console.log(`Fetching ${selectedAccount} contacts from Salesforce`);
      showLoadingMsg(true);
      getContactsForAccount(selectedAccountId); 
    }

/*     function showXmatchResults() {
      let rec;
      
      hideRadio1       = false;
      tab4Id.className = 'tabs__link NoDisplay';
      tab4.className   = 'tabs__section NoDisplay';

      if(xMatchDetailMap[selectedAccountId]) {
        if(xMatchDetailMap[selectedAccountId]['Contact']) {
          hideRadio1 = true; // If Xmatch has been run for this Emp, can't let user re-run until they have clicked reset, which invokes a batch truncate.
          rec = xMatchDetailMap[selectedAccountId]['Contact'];
          if(rec.CompletedCnt > 0 && rec.HoldingCnt + rec.QueuedCnt + rec.PreparingCnt + rec.ProcessingCnt + rec.AbortedCnt + rec.FailedCnt == 0)  {
            getXmatches();
            tab4Id.className      = 'tabs__link';
            tab4.className        = 'tabs__section';
          }
        }
      }

    } */

/*     function showLicensureResults() {
      let rec;

      hideRadio2       = false;
      tab5Id.className = 'tabs__link NoDisplay';
      tab5.className   = 'tabs__section NoDisplay';

      if(xMatchDetailMap[selectedAccountId]) {
        if(xMatchDetailMap[selectedAccountId]['Licensure__c']) {
          rec = xMatchDetailMap[selectedAccountId]['Licensure__c'];
          if(rec.CompletedCnt > 0 && rec.HoldingCnt + rec.QueuedCnt + rec.PreparingCnt + rec.ProcessingCnt + rec.AbortedCnt + rec.FailedCnt == 0) {
            getLicensureXMatches();
            tab5Id.className      = 'tabs__link';
            tab5.className        = 'tabs__section';
            resetXmatchLicensureButton.className = 'show'; 
          } 
        }
      }

    } */

    function accountSelectionHandler() {
      selectedAccountNode = accountGridOptions.api.getSelectedNodes()[0];
      selectedAccount     = selectedAccountNode.data.AccountName;
      selectedAccountId   = selectedAccountNode.data.Id;
      selectAccountLabel.textContent = selectedAccount;
    }

    function contactSelectionHandler() {
      let test = contactGridOptions.api.getSelectedNodes();
      selectedContactNode = {};
      selectedContactName = selectedContactId = '';
      if (test.length > 0) {
        selectedContactNode = contactGridOptions.api.getSelectedNodes()[0];
        selectedContactName = selectedContactNode.data.FirstName + selectedContactNode.data.LastName;
        selectedContactId   = selectedContactNode.data.Id;

        if(taskNoteMap[selectedContactId]) {
          let task = taskNoteMap[selectedContactId];
          taskNotesInput.value        = task.Description;
          taskNotesDateInput.value    = task.ActivityDate;
          taskNotesSubjectInput.value = task.Subject;
        } else {
          taskNotesInput.value        = '';
          taskNotesDateInput.value    = '';
          taskNotesSubjectInput.value = '';
        }

      }
    }

    function getContactsForAccount(id) {
      getContactData(id).then(contactData => {
        processContacts(contactData);
      }).then(function () {
        notify.log('Retrieved Contacts from Salesforce....');
        showContactGrid();
        // Note not calling recount() here, as doing initial api.setSort is triggering contactSortChangeHandler, which does recount.
      }).catch(error => {
        console.log('Error' + error);
      });
    }

    function getContactData (id) {
      return new Promise(function (resolve, reject) {
        GotvCcController.getDataEntryContactData(id, null, userLevel, userId, (result, event) => {
          if (event.status) {
            resolve(result);
          }
          else {
            reject(event);
          }
        }, {buffer: false, timeout: 120000 });
      });      
    }
     
    function processContacts(results) {
      return new Promise(function (resolve, reject) {
        let i, len, rec, mapKey, buCount, name, phoneToUse;
        let id, accountId, lastName, firstName, middleName, department, division, title, cellPhone, homePhone, phone;
        let mailingStreet,mailingCity,mailingState,mailingZip;
        let bu,inCurrentBU;

        contactMap[selectedAccountId] = {};
        contactDataArray              = [];
        contactCount = 0;
        len = results.length;

        for (i = 0; i < len; i++) {
          id = accountId = bu = buCount = name = lastName = firstName = department = division = title = phoneToUse = cellPhone = homePhone = phone = '';
          rec = results[i];

          if (rec) {
            contactCount++;
            id                        = rec.Id;
            accountId                 = rec.AccountId;
            firstName                 = toProperCase(rec.FirstName);
            lastName                  = toProperCase(rec.LastName);
            middleName                = toProperCase(rec.MiddleName);
            title                     = toProperCase(rec.Title);
            department                = toProperCase(rec.Department);
            division                  = toProperCase(rec.Division__c);
            cellPhone                 = phoneFormat(rec.MobilePhone);
            homePhone                 = phoneFormat(rec.HomePhone);
            phone                     = phoneFormat(rec.Phone);
            bu                        = rec.BU__c               || '';
            inCurrentBU               = rec.In_Current_BU__c    || '';
            name = lastName + ', ' + firstName;

            phoneToUse = '';
            if (cellPhone)
              phoneToUse = cellPhone;
            else if (homePhone)
              phoneToUse = homePhone;
            else if (phone)
              phoneToUse = phone;

            contactDataArray.push({AccountId:accountId,BU:bu,BuCount:buCount,Department:department,Division:division,
              FirstName:firstName,LastName:lastName,MiddleName:middleName,Id:id,MailingCity:mailingCity,MailingState:mailingState,MailingStreet:mailingStreet,MailingZip:mailingZip,
              CellPhone:cellPhone,HomePhone:homePhone,Phone:phone,PhoneToUse:phoneToUse
            });
            // contactMap[selectedAccountId][id] = {AccountId:accountId,BU:bu,BuCount:buCount,Department:department,Division:division,
            //   FirstName:firstName,LastName:lastName,Id:id,MailingCity:mailingCity,MailingState:mailingState,MailingStreet:mailingStreet,MailingZip:mailingZip,
            //   CellPhone:cellPhone,HomePhone:homePhone,Phone:phone,PhoneToUse:phoneToUse};
          }
          else {
            console.log('record error');
          }
        }
        console.log(contactDataArray);
        resolve(contactDataArray);
      });
    }

    function showLoadingMsg(show) {
      if (show) // modal window fake
        modalLoadingDiv.setAttribute('class', 'modalDialog');
      else
        modalLoadingDiv.setAttribute('class', 'hide');
    }

    function numberFormat(number, decimals, dec_point, thousands_sep) {
      number = (number + '')
        .replace(/[^0-9+\-Ee.]/g, '');
      var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
        s = '',
        toFixedFix = function (n, prec) {
          var k = Math.pow(10, prec);
          return '' + (Math.round(n * k) / k).toFixed(prec);
        };
      // Fix for IE parseFloat(0.55).toFixed(0) = 0;
      s = (prec ? toFixedFix(n, prec) : '' + Math.round(n))
        .split('.');
      if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
      }
      if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1)
          .join('0');
      }
      return s.join(dec);
    }

    function phoneFormat(s) {
      let s1 = '';
      if (s != null) {
        s1 = s.trim().replace(/[^0-9]/g, '');
        if (s1.length < 10) s1 = '';
//      s1 = '(' + s1.substr(0, 3) + ') ' + s1.substr(3, 3) + '-' + s1.substr(6);
      }
      return s1;
    }

    function initAgGrid() {
      agGrid.LicenseManager.setLicenseKey("SEIU-UWH_Site_1Devs7_February_2018__MTUxNzk2MTYwMDAwMA==f54417966e3979c429e6a1af033c1a9a");

      accountColDefs = [
        { headerName: 'Division',    field: 'Division',    width: 120, suppressMenu: true,  sortingOrder: ['asc', 'desc'] },
        { headerName: 'Name',        field: 'AccountName', width: 400, suppressMenu: true,  sortingOrder: ['asc', 'desc'], sort: 'asc' },
        { headerName: 'BU',          field: 'BuCount',     width:  60, suppressMenu: true,  sortingOrder: ['asc', 'desc'], cellClass: 'cellRight' },
        { headerName: 'Region',      field: 'Region',      width: 120, suppressMenu: true,  sortingOrder: ['asc', 'desc'] },
        { headerName: 'Coordinator', field: 'Coord',       width: 160, suppressMenu: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'Organizer1',  field: 'Org1',        width: 160, suppressMenu: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } }
      ];
    }

    function initAgGridContact() {
      licensureColDefs = [
        { headerName: 'Id',                       field: 'Id',                   hide: true, width: 170, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Last',                     field: 'LastName',             width: 140, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',            width: 140, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Middle',                   field: 'MiddleName',           width: 140, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'License Agency',           field: 'LicenseAgency',        width: 260, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Exp Date',         field: 'LicenseExpDate',       width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Status',           field: 'LicenseStatus',        width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Type',             field: 'LicenseType',          width: 230, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License Street',           field: 'LicenseStreet',        width: 210, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'License City ',            field: 'LicenseCity',          width: 180, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'State',                    field: 'LicenseState',         width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'Zip',                      field: 'LicenseZip',           width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'Email',                    field: 'Email',                width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },    
        { headerName: 'Phone1',                   field: 'Phone1',               width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] },  
        { headerName: 'Phone2',                   field: 'Phone2',               width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] }, 
        { headerName: 'Phone3',                   field: 'Phone3',               width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'] } 
      ];

      licensureDefaultColDefs = {
        headerClass: 'XHeaderLeft',
        cellClass: 'XCellLeft', 
        suppressMenu:    false,
        suppressSorting: false
      };

      xMatchedColDefs = [ 
        { headerName: 'Id',                       field: 'Id',                       hide: true, width: 170, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Last',                     field: 'LastName',                 width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',                width: 120, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Middle',                   field: 'MiddleName',               width:  90, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc'], pinned: 'left' },
        { headerName: 'Account',                  field: 'AccountName',              width: 320, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'], },
        { headerName: 'Department',               field: 'Department',               width: 250, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'Member Status',            field: 'MemberStatus',             width: 130, suppressMenu: true,  suppressSorting: true},                        
        { headerName: 'Division',                 field: 'Division',                 width: 120, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'], filter: 'set', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true } },
        { headerName: 'Email',                    field: 'Email',                    width: 250, suppressMenu: false, suppressSorting: false, sortingOrder: ['asc', 'desc'] },
        { headerName: 'Home Phone',               field: 'HomePhone',                width: 130, suppressMenu: true,  suppressSorting: true},
        { headerName: 'Cell Phone',               field: 'CellPhone',                width: 130, suppressMenu: true,  suppressSorting: true},
        { headerName: 'Phone',                    field: 'Phone',                    width: 130, suppressMenu: true,  suppressSorting: true},
        { headerName: 'Street',                   field: 'MailingStreet',            width: 210, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']},
        { headerName: 'City',                     field: 'MailingCity',              width: 170, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']},
        { headerName: 'State',                    field: 'MailingState',             width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']},
        { headerName: 'Zip',                      field: 'MailingZip',               width:  70, suppressMenu: true,  suppressSorting: false, sortingOrder: ['asc', 'desc']}
      ];

      xMatchedDefaultColDefs = {
        headerClass: 'XHeaderLeft',
        cellClass: 'XCellLeft', 
        suppressMenu:    false,
        suppressSorting: false
      };

      contactColDefs = [
        { headerName: 'Last',                     field: 'LastName',                 width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: 'First',                    field: 'FirstName',                width: 120, suppressMenu: true,  editable: true, pinned: 'left' },
        { headerName: 'Department',               field: 'Department',               width: 200, filter: 'agSetColumnFilter', menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, editable: true },        
        { headerName: 'In BU',                    field: 'InCurrentBU',              width:  80, suppressSorting: true,  menuTabs: ['filterMenuTab'], filterParams: { suppressMiniFilter: true }, cellClass: 'cellCenter filterCol', headerClass: 'HeaderCenter'},        
        { headerName: 'Phone',                    field: 'Phone',                    width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Home Phone',               field: 'HomePhone',                width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Cell Phone',               field: 'CellPhone',                width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Other Phone',              field: 'OtherPhone',               width: 130, suppressMenu: true,  editable: true, cellClass: 'cellCenter', headerClass: 'HeaderCenter'},
        { headerName: 'Street',                   field: 'MailingStreet',            width: 210, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'City',                     field: 'MailingCity',              width: 170, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'State',                    field: 'MailingState',             width:  70, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'Zip',                      field: 'MailingZip',               width:  70, suppressMenu: true,  cellClass: 'NoEdit', headerClass: 'NoEditHdr'  },
        { headerName: 'BU',                       field: 'BU',                       width: 130, suppressMenu: true, editable: true, headerClass: 'HeaderLeft' }
      ];
      
      contactDefaultColDefs = {
        headerClass: 'HeaderLeft',
        cellClass: 'cellLeft', 
        sortingOrder: ['asc', 'desc'],
        suppressMenu:    false,
        suppressSorting: false
      };

    }

    // Note: Tried usnig tooltip: toolTipFn instead of tooltipField, but neither are updated when cell is changed. :(
    // function toolTipFn(params) {
    //   console.log(params);
    //   return params.data.NotesCombo;
    // }

    function resize(pLen, pMin) {
      let retVal;
      if (pLen > 20)
        retVal = 693;
      else
        retVal = pLen * 33;

      if (retVal < pMin)
        retVal = pMin;

      return retVal;
    }

    async function getData() {

      tStart = performance.now();
      accountData = await getAccountData();
      tEnd   = performance.now();
      console.log(`Call to getAccountData() took ${tEnd - tStart} milliseconds.`);
      
      tStart = performance.now();
      status = await processAccountData(accountData);
      tEnd   = performance.now();
      console.log(`Processing accounts took ${tEnd - tStart} milliseconds.`);

      tStart = performance.now();
      licensureCountData = await getLicensureCounts();

      tEnd   = performance.now();
      console.log(`Call to getLicensureCounts() ${tEnd - tStart} milliseconds.`);      

      tStart = performance.now();
      status = await processLicensureCounts(licensureCountData);
      tEnd   = performance.now();
      console.log(`Call to processLicensureCounts() took ${tEnd - tStart} milliseconds.`);

      return status;
    }

    async function retrieveButtonHandler() {
console.log('awaiting getLicensureData()');      
      tStart = performance.now();
      licensureData = await getLicensureData();
      tEnd   = performance.now();
      console.log(`Call to getLicensureData() took ${tEnd - tStart} milliseconds.`);

      tStart = performance.now();
      status = await processLicensureData(licensureData).then(function () {
        showLicensureGrid();
      }).catch(error => {
        console.log('Error' + error);
      });
      tEnd   = performance.now();
      console.log(`Processing licensure data took ${tEnd - tStart} milliseconds.`);

    }

    function licensurePhoneMatch(phoneString,licensureRec) {
      let phoneScore;
      if(licensureRec.Phone1) {
        phoneScore = (phoneString == licensureRec.Phone1) ? 1 : 0;
        if(phoneScore) {
          return {PhoneNumber:phoneString,PhoneScore:phoneScore};
        }
      }

      if(licensureRec.Phone2) {
        phoneScore = (phoneString == licensureRec.Phone2) ? 1 : 0;
        if(phoneScore) {
          return {PhoneNumber:phoneString,PhoneScore:phoneScore};
        }
      }

      if(licensureRec.Phone3) {
        phoneScore = (phoneString == licensureRec.Phone3) ? 1 : 0;
        if(phoneScore) {
          return {PhoneNumber:phoneString,PhoneScore:phoneScore};
        }
      }

      return {PhoneNumber:phoneString,PhoneScore:0};  
    }

    function matchButtonHandler() {
      return new Promise(function (resolve, reject) {
        let licensureArrayLength = licensureDataArray.length;
        let contactArrayLength   = contactDataArray.length;
        let contactPtr,licensurePtr;
        let possibleMatches = [];
        let contactRec, licensureRec, lpmObj;
        let checkCnt = 0, possibleMatchCnt = 0;
        let sFirstName2chars,sLastName2chars,firstNameScore,lastNameScore,homePhoneScore,cellPhoneScore,phoneScore,cityScore,streetScore;
        let homePhoneSource,cellPhoneSource,phoneSource,streetSource,homePhoneMatch,cellPhoneMatch,phoneMatch,streetMatch;

        tStart = performance.now();
        for(contactPtr=0;contactPtr<contactArrayLength;contactPtr++) {

          contactRec = contactDataArray[contactPtr];

          for(licensurePtr=0;licensurePtr<licensureArrayLength;licensurePtr++) {
            checkCnt++;
            firstNameScore = lastNameScore = homePhoneScore = cellPhoneScore = phoneScore = cityScore, streetScore = 0;
            homePhoneSource = cellPhoneSource = phoneSource = streetSource = homePhoneMatch = cellPhoneMatch = phoneMatch = streetMatch = '';

            licensureRec     = licensureDataArray[licensurePtr];
            sFirstName2chars = contactRec.FirstName.substr(0,2);
            sLastName2chars  = contactRec.LastName.substr(0,2);

            if(sFirstName2chars === licensureRec.FirstName.substr(0,2) &&                
               sLastName2chars  === licensureRec.LastName.substr(0,2)) {
              firstNameScore = JaroWinklerDistance(contactRec.FirstName,licensureRec.FirstName,0.1,false);
              lastNameScore  = JaroWinklerDistance(contactRec.LastName,licensureRec.LastName,0.1,false);
            } 

            if(contactRec.HomePhone) {
              lpmObj = licensurePhoneMatch(contactRec.HomePhone, licensureRec);
              if(lpmObj.PhoneScore) {
                homePhoneSource = contactRec.HomePhone;
                homePhoneMatch  = lpmObj.PhoneNumber;
                homePhoneScore  = lpmObj.PhoneScore;
              } 
            }

            if(contactRec.CellPhone) {
              lpmObj = licensurePhoneMatch(contactRec.CellPhone, licensureRec);
              if(lpmObj.PhoneScore) {
                cellPhoneSource = contactRec.CellPhone;
                cellPhoneMatch  = lpmObj.PhoneNumber;
                cellPhoneScore  = lpmObj.PhoneScore;
              } 
            }
            
            if(contactRec.Phone) {
              lpmObj = licensurePhoneMatch(contactRec.Phone, licensureRec);
              if(lpmObj.PhoneScore) {
                phoneSource = contactRec.Phone;
                phoneMatch  = lpmObj.PhoneNumber;
                phoneScore  = lpmObj.PhoneScore;
              } 
            }
            
            if(contactRec.MailingCity && licensureRec.LicenseCity) { 

              cityScore = JaroWinklerDistance(contactRec.MailingCity,licensureRec.LicenseCity,0.1,false);

              if(cityScore > JW_THRESHHOLD && contactRec.MailingStreet && licensureRec.LicenseStreet) {
                streetScore = JaroWinklerDistance(contactRec.MailingStreet,licensureRec.LicenseStreet,0.1,false);
                if(streetScore > JW_THRESHHOLD) {
                  streetSource = contactRec.MailingStreet;
                  streetMatch  = licensureRec.LicenseStreet;
                }
              }
            }

            if( (firstNameScore > JW_THRESHHOLD && lastNameScore > JW_THRESHHOLD) ||
                 homePhoneScore > JW_THRESHHOLD || 
                 cellPhoneScore > JW_THRESHHOLD || 
                 phoneScore     > JW_THRESHHOLD || 
                 streetScore    > JW_THRESHHOLD) {
              possibleMatchCnt++;

              possibleMatches.push({
                NameSource: `[${contactRec.FirstName}][${contactRec.MiddleName}][${contactRec.LastName}]`,
                NameMatch:  `[${licensureRec.FirstName}][${licensureRec.MiddleName}][${licensureRec.LastName}]`,
                FirstNameScore:  firstNameScore,
                LastNameScore:   lastNameScore,
                HomePhoneSource: homePhoneSource,
                HomePhoneMatch:  homePhoneMatch, 
                HomePhoneScore:  homePhoneScore, 
                CellPhoneSource: cellPhoneSource,
                CellPhoneMatch:  cellPhoneMatch,
                CellPhoneScore:  cellPhoneScore,   
                PhoneSource:     phoneSource,
                PhoneMatch:      phoneMatch,
                PhoneScore:      phoneScore,
                StreetSource:    streetSource,
                StreetMatch:     streetMatch,
                StreetScore:     streetScore,
                ContactIndex:    contactPtr,
                LicensureIndex:  licensurePtr
              });
            }

          }
        }

        if(possibleMatchCnt) {
          console.log(possibleMatches);
        } else {
          console.log('No matches :(');
        }

        currentRecordLabel.textContent = `Current Record: ${contactPtr}`;
        progressLabel.textContent = `Targets checked: ${licensurePtr}`;

        tEnd   = performance.now();
        console.log(`Matching took ${tEnd - tStart} milliseconds.`);
        alert('Done');
        debugger;
        resolve('OK');
      });
    }

    function processLicensureData(results) {
      return new Promise(function (resolve, reject) {
        let id, lastName, firstName, middleName, licenseAgency, licenseExpDate, licenseStatus, licenseType;
        let licenseStreet,licenseCity,licenseState,licenseZip;
        let email, phone1, phone2, phone3,i,len,rec;
        
        console.log('processLicensureData() => ');
        console.log(results);
        licensureDataArray = [];
        len = results.length;
        if (len > 0) {
          for (i = 0; i < len; i++) {
            id = lastName = firstName = middleName = licenseAgency = licenseExpDate = licenseStatus = licenseType = '';
            licenseStreet = licenseCity = licenseState = licenseZip = email = phone1 = phone2 = phone3 = '';
            rec            = results[i]    
            id             = rec.Id
            lastName       = toProperCase(rec.Last_Name__c);
            firstName      = toProperCase(rec.First_Name__c);
            middleName     = toProperCase(rec.Middle_Name__c);
            licenseAgency  = toProperCase(rec.License_Agency__c);
            licenseExpDate = moment(rec.License_Expiration_Date__c).format('MM/DD/YYYY'); 
            licenseStatus  = toProperCase(rec.License_Status__c);
            licenseType    = toProperCase(rec.License_Type__c);
            licenseStreet  = toProperCase(rec.License_Addr_Street__c);
            licenseCity    = toProperCase(rec.License_Addr_City__c); 
            licenseState   = rec.License_Addr_State__c || '';
            licenseState   = licenseState.toUpperCase();
            licenseZip     = toProperCase(rec.License_Addr_Zip__c);
            email          = toProperCase(rec.Email__c);
            phone1         = phoneFormat(rec.Phone_1__c);
            phone2         = phoneFormat(rec.Phone_2__c);
            phone3         = phoneFormat(rec.Phone_3__c);
            licensureDataArray.push({Id:id,LastName:lastName,FirstName:firstName,MiddleName:middleName,
              LicenseType:licenseType,LicenseStreet:licenseStreet,LicenseCity:licenseCity,LicenseState:licenseState,LicenseZip:licenseZip,
              LicenseAgency:licenseAgency,LicenseExpDate:licenseExpDate,LicenseStatus:licenseStatus,LicenseType:licenseType,Email:email,Phone1:phone1,Phone2:phone2,Phone3:phone3});
          }        
        }
        resolve('ok');
      });      
    }

    var status,accountGridOptions, accountColDefs, contactGridOptions, allContactColDefs, contactDefaultColDefs,  xMatchedGridOptions, xMatchedColDefs, xMatchedDefaultColDefs;
    var allContactDefaultColDefs,contactColDefs,contactDefaultColDefs,gotvContactColDefs,gotvContactDefaultColDefs;
    var selectedAccount, selectedAccountId, selectedContactName, selectedContactId, selectedUniverseFilters,selectedUniverseObject, selectedUniverseName, selectedUniverseId, changedField, changeTo;
    var accountMap, accountData, accountDataArray, xMatchCounts; 
    var contactMap, contactData, contactDataArray, contactCount;
    var licensureData,licensureCountData,licListCountsArray = [];

    var shownBefore;
    var selectedAccountNode, selectedContactNode, selectedNodes = [];

    var selectedViewSort,xMatchedDataArray = [],xmatchDetailDataArray = [], selectedTab = 1, xMatchCountsMap = {};
    var xMatchDetailMap = {}, xMatchDetail,  tStart, tEnd;
    var licensureGridOptions, licensureColDefs, licensureDefaultColDefs,licensureDataArray = [];

    const navigationDiv                = document.getElementById('NavigationDiv');
    const modalLoadingDiv              = document.getElementById('ModalLoadingDiv');
    const titleButton                  = document.getElementById('TitleBtn');
    const tab2Content                  = document.getElementById('Tab2Content');
    const tab3Content                  = document.getElementById('Tab3Content');
    const tab4Content                  = document.getElementById('Tab4Content');
    const tab2ControlsDiv              = document.getElementById('Tab2ControlsDiv');
    const accountGridDiv               = document.getElementById('AccountGridDiv');
    const contactGridDiv               = document.getElementById('ContactGridDiv');
    const xMatchedGridDiv              = document.getElementById('XMatchedGridDiv');
    const xMatchButtonsDiv             = document.getElementById('XmatchButtonsDiv');
    const licensureGridDiv             = document.getElementById('LicensureGridDiv');
    const tab1Id                       = document.getElementById('Tab1Id');
    const tab2Id                       = document.getElementById('Tab2Id');
    const tab3Id                       = document.getElementById('Tab3Id');
    
    const currentRecordLabel           = document.getElementById('CurrentRecordLbl');
    const progressLabel                = document.getElementById('ProgressLbl');
    const selectAccountLabel           = document.getElementById('SelectAccountLbl');    
    const accountFilterInput           = document.getElementById('AccountFilterInput');
    const createXmatchDiv              = document.getElementById('CreateXmatchDiv');
    const licCountsDiv                 = document.getElementById('LicCountsDiv');

    const filterLabel                  = document.getElementById('FilterDescDiv');
    const screensize                   = document.getElementById('ScreenSize');
    const currentFilter                = document.getElementById('CurrentFilter');

    const matchButton                  = document.getElementById('MatchBtn');
    const retrieveButton               = document.getElementById('RetrieveBtn');

    const xmatchRadio1   = document.getElementById('XmatchRadio1');
    const xmatchRadio2   = document.getElementById('XmatchRadio2');
    
    const notify = humane.create({ baseCls: 'humane-libnotify' });
    const dateOptions1 = { year: 'numeric', month: 'numeric', day: 'numeric' };
    const dateOptions2 = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' };

    const r1 = new RegExp(/&amp/, 'gm');
    const r2 = new RegExp(/&#39/, 'gm');
    const r3 = new RegExp(/&;/, 'gm');
    const r4 = new RegExp(/&quot/, 'gm');
    const r5 = new RegExp(/';/, 'gm');
    const r6 = new RegExp(/&gt/, 'gm');
    const r7 = new RegExp(/>;/, 'gm');
    const r8 = new RegExp(/&lt/, 'gm');
    const r9 = new RegExp(/<;/, 'gm');
    const rQuote = new RegExp(/'/, 'g');

    const nameSort = [
      { colId: 'LastName', sort: 'asc' },
      { colId: 'FirstName', sort: 'asc' }
    ];

    const nameSortDesc = [
      { colId: 'LastName',  sort: 'desc' },
      { colId: 'FirstName', sort: 'desc' }
    ];

    const titleSort = [
      { colId: 'Title',  sort: 'desc' }
    ] 

    const xmatchSort = [
      { colId: 'LastName',    sort: 'asc' },
      { colId: 'FirstName',   sort: 'asc' },
      { colId: 'AccountName', sort: 'asc' }
    ];

    const initialSort = [
      { colId: 'Owner', sort: 'asc' },
      { colId: 'VoteBlock', sort: 'asc' }
    ];

    // ***************** Main Program Entry *****************
    var sessionId, userId, userFirstName, userLastName, userDepartment, userTitle, userProfileId, userRoleId,baseURL, userLevel;
    tab2Content.className = 'hide';
    tab3Content.className = 'hide';
//    tab4Content.className = 'hide';

    Visualforce.remoting.escape = false;

    const JW_THRESHHOLD = 0.93;  // JaroWinklerDistance 

    init();
    initAgGrid();
    showLoadingMsg(true);

    getData().then(retVal => {
      console.log(retVal);
    });
 
  </script>

  <script>        
    <apex:includeScript value="{!$Resource.puretabsJs}" />
    <apex:includeScript value="{!$Resource.MomentJs}" />
    <apex:stylesheet value="{!URLFOR($Resource.HumaneZip, 'libnotify.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.HumaneZip,'humane.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.JaroWinklerDistance, 'JaroWinklerDistance.js')}"/>
  </script>
</body>

</html>
</apex:page>